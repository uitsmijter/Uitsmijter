---
apiVersion: v1
kind: Secret
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions
  labels:
    app: uitsmijter-sessions
type: Opaque
data:
  redis-password: {{ .Values.redisPassword | default (randAlphaNum 12) | b64enc | quote }}


---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions
  labels:
    app: uitsmijter-sessions
data:
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-health
  labels:
    app: uitsmijter-sessions
data:
  ping_readiness_local.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
     response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-headless
  labels:
    app: uitsmijter-sessions
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: uitsmijter-sessions

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-master
  labels:
    app: uitsmijter-sessions
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: uitsmijter-sessions
    role: master

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-slave
  labels:
    app: uitsmijter-sessions
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: redis
  selector:
    app: uitsmijter-sessions
    role: slave

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-master
  labels:
    app: uitsmijter-sessions
spec:
  selector:
    matchLabels:
      app: uitsmijter-sessions
      role: master
  serviceName: uitsmijter-sessions-headless
  template:
    metadata:
      labels:
        app: uitsmijter-sessions
        role: master
      annotations:
        checksum/health: caabbb72e0c57d8fc605a29541deb6b7dc0aa883227a9d292183ef16103a36e7
        checksum/configmap: 1c156c01972d3692edc746e54ff4dbe83c58e8d6bfad61b2835032f9490648d4
        checksum/secret: 972fa5c81df692f3ae9b231a4c06ba75365ec483801e82c821377de75d9892b5
    spec:

      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.13-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--requirepass" "${REDIS_PASSWORD}")
              ARGS+=("--masterauth" "${REDIS_PASSWORD}")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
              /run.sh ${ARGS[@]}
          env:
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: uitsmijter-sessions
                  key: redis-password
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 5
          resources:
            null
          volumeMounts:
            - name: health
              mountPath: /health
            - name: uitsmijter-sessions-data
              mountPath: /data
              subPath:
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
      volumes:
        - name: health
          configMap:
            name: uitsmijter-sessions-health
            defaultMode: 0755
        - name: config
          configMap:
            name: uitsmijter-sessions
        - name: redis-tmp-conf
          emptyDir: { }
  volumeClaimTemplates:
    - metadata:
        name: uitsmijter-sessions-data
        labels:
          app: uitsmijter-sessions
          component: master
      spec:
        storageClassName: {{ .Values.storageClassName | quote }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "300Mi"

        selector:
  updateStrategy:
    type: RollingUpdate

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-slave
  labels:
    app: uitsmijter-sessions
spec:
  replicas: 1
  serviceName: uitsmijter-sessions-headless
  selector:
    matchLabels:
      app: uitsmijter-sessions
      role: slave
  template:
    metadata:
      labels:
        app: uitsmijter-sessions
        role: slave
      annotations:
        checksum/health: caabbb72e0c57d8fc605a29541deb6b7dc0aa883227a9d292183ef16103a36e7
        checksum/configmap: 1c156c01972d3692edc746e54ff4dbe83c58e8d6bfad61b2835032f9490648d4
        checksum/secret: c6268700e4550aa65c760b485a9fe75c256307309cceb597b0e038abe1961831
    spec:

      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      containers:
        - name: redis
          image: docker.io/bitnami/redis:6.2.13-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -n $REDIS_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_PASSWORD_FILE}`
                export REDIS_PASSWORD=$password_aux
              fi
              if [[ -n $REDIS_MASTER_PASSWORD_FILE ]]; then
                password_aux=`cat ${REDIS_MASTER_PASSWORD_FILE}`
                export REDIS_MASTER_PASSWORD=$password_aux
              fi
              if [[ ! -f /opt/bitnami/redis/etc/replica.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/replica.conf /opt/bitnami/redis/etc/replica.conf
              fi
              if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
                cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
              fi
              ARGS=("--port" "${REDIS_PORT}")
              ARGS+=("--slaveof" "${REDIS_MASTER_HOST}" "${REDIS_MASTER_PORT_NUMBER}")
              ARGS+=("--requirepass" "${REDIS_PASSWORD}")
              ARGS+=("--masterauth" "${REDIS_MASTER_PASSWORD}")
              ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
              ARGS+=("--include" "/opt/bitnami/redis/etc/replica.conf")
              /run.sh "${ARGS[@]}"
          env:
            - name: REDIS_REPLICATION_MODE
              value: slave
            - name: REDIS_MASTER_HOST
              value: uitsmijter-sessions-master-0.uitsmijter-sessions-headless
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_MASTER_PORT_NUMBER
              value: "6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: uitsmijter-sessions
                  key: redis-password
            - name: REDIS_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: uitsmijter-sessions
                  key: redis-password
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local_and_master.sh 5
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local_and_master.sh 5
          resources:
            null
          volumeMounts:
            - name: health
              mountPath: /health
            - name: uitsmijter-sessions-data
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc
      volumes:
        - name: health
          configMap:
            name: uitsmijter-sessions-health
            defaultMode: 0755
        - name: config
          configMap:
            name: uitsmijter-sessions
        - name: sentinel-tmp-conf
          emptyDir: { }
        - name: redis-tmp-conf
          emptyDir: { }
  volumeClaimTemplates:
    - metadata:
        name: uitsmijter-sessions-data
        labels:
          app: uitsmijter-sessions
          component: slave
      spec:
        storageClassName: {{ .Values.storageClassName | quote }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "300Mi"

        selector:
  updateStrategy:
    type: RollingUpdate
